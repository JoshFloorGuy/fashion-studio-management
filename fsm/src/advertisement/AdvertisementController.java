package advertisement;

import java.util.ArrayList;
import java.util.Scanner;

import fsm.*;
import hr.*;
import runway.*;

public class AdvertisementController {

	public AdvertisementController(RunwayEventController rc, PhotoshootController pc) {
		this.rc = rc;
		this.pc = pc;

	}

	private ArrayList<AdvertisementBusinessTeam> teams;
	private ArrayList<Advertisement> advertisements;
	private RunwayEventController rc;
	private PhotoshootController pc;

	public boolean createBusinessTeam() {
		Scanner in = new Scanner(System.in);

		Employee lead;
		ArrayList<Employee> memberList = new ArrayList<>();
		double revenueGeneratedByTeam;
		double sumPayoutForTeam;
		AdvertisingAgency agency;

		/*
		 * show list of employees ask them to pick name of employee FOR LEAD ask
		 * them to pick name of employee for team, or -n if done selecting
		 * employees not include names already chosen, for lead or for team
		 * 
		 * ask for advertising agency name contact info for ^ contact email for
		 * ^ fee for agency
		 * 
		 * estimated revenue generated by business team
		 * 
		 * print data, including sum salary (change get salary to calculate it
		 * by running through list, + AGENCY)
		 * 
		 */

		ArrayList<Employee> people = fsm.DatabaseSupport.getEmployees();
		String name;
		for (int i = 0; i < people.size(); i++) {
			name = people.get(i).getName();
			System.out.println(name);
		}
		
		System.out.println(
				"Please enter the name of an employee from the above list of employees to be the project lead:");
		lead = null;
		boolean empNameValid = false;
		while (!empNameValid) {
			name = in.nextLine();
			empNameValid = true;
			for (Employee person : people) {
				if (person.getName().equals(name)) {
					lead = person;
				}
			}
		}

		// print other employees
		for (int i = 0; i < people.size(); i++) {
			name = people.get(i).getName();
			System.out.println(name);
		}
		System.out.println(
				"Please enter the name of an employee from the above list of employees to be a project team member:");
		empNameValid = false;
		while (!empNameValid) {
			name = in.nextLine();
			empNameValid = true;
			for (Employee person : people) {
				if (person.getName().equals(name)) {
					memberList.add(person);
				}
			}
		}
		revenueGeneratedByTeam = 0;
		sumPayoutForTeam = 0;
		

		System.out.println("Please enter the name of the advertising agency who will be working on this project:");
		String agencyName = in.nextLine();

		System.out.println("Please enter the name of a contact at the advertising agency:");
		String agencyContact = in.nextLine();

		System.out.println("Please enter the email of the contact:");
		String agencyEmail = in.nextLine();

		System.out.println("Please enter the fee for hiring the agency:");
		double agencyFee = Double.parseDouble(in.nextLine());

		agency = new AdvertisingAgency(agencyName, agencyContact, agencyEmail, agencyFee);

		System.out.println("Please enter the estimated amount of revenue that this business team will generate:");
		double revenue = Double.parseDouble(in.nextLine());
		
		AdvertisementBusinessTeam businessTeam = new AdvertisementBusinessTeam(lead, memberList, revenueGeneratedByTeam, sumPayoutForTeam, agency);

		System.out.println("The advertisement business team has been created.");

		return true;
	}

	public boolean createAdvertisement() {

		AdvertisementBusinessTeam team;
		String schedulingInfoNotes;
		RunwayEvent event;
		Photoshoot photoshoot;
		String model;
		String photographer;
		FashionLine line;
		Item item;
		String targetAge;
		String targetGender;
		String targetLocation;

		/*
		 * show business teams "select a business team to work on this ad"
		 * medium is the source of the ad from a runway event or a photoshoot if
		 * runway, list runway, have them pick, and have them pick model and
		 * photographer from list if if photoshoot, have them pick photoshoot
		 * from list, it only has 1x model and photographer null out the other
		 * one
		 * 
		 * show line ; please select the fashion line show item from line ;
		 * please select item from the line
		 * 
		 * 
		 * scheduling information notes
		 * 
		 * please enter the age of target audience please enter the gender of
		 * target audience please enter the estimated location of target
		 * audience
		 * 
		 * print data back
		 * 
		 */

		Scanner in = new Scanner(System.in);
		// print lead name
		for (AdvertisementBusinessTeam adteam : teams) {
			System.out.println(adteam.getLead().getName());
		}
		System.out.println("Please select the name of the lead:");
		String leadInput = in.nextLine();
		team = null;
		for (AdvertisementBusinessTeam adteam : teams) {
			if (adteam.getLead().getName().equals(leadInput)) {
				team = adteam;
			}
		}

		System.out.println("Please describe the medium with which this ad will be presented:");
		String medium = in.nextLine();

		System.out.println("Please write if the source of the ad is either: \n1 - photoshoot \n2 - runway event");
		String photoshootOrEvent = in.nextLine();

		if (photoshootOrEvent.equals("1")) {
			event = null;
			pc.showPhotoshoots();
			System.out.println("Please enter the date of the photoshoot that is the source for the ad:");
			String date = in.nextLine();
			int photoshootIndex = -1;
			for (int i = 0; i < pc.getPhotoshoots().size(); i++) {
				if (date.equals(pc.getPhotoshoots().get(i).getDate())) {
					photoshootIndex = i;
				}
			}
			if (photoshootIndex < 0) {
				System.out.println("The following date is not valid.");
				return false;
			}
			photoshoot = pc.getPhotoshoots().get(photoshootIndex);
		} else {
			photoshoot = null;
			rc.showRunwayEvents();
			System.out.println("Please enter the date of the runway event that is the source for the ad:");
			String date = in.nextLine();
			int index = -1;
			for (int i = 0; i < rc.getRunwayEvents().size(); i++) {
				if (date.equals(rc.getRunwayEvents().get(i).getDate())) {
					index = i;
				}
			}
			if (index < 0) {
				System.out.println("The following date is not valid.");
				return false;
			}
			event = rc.getRunwayEvents().get(index);
		}

		if (photoshoot != null) {
			model = photoshoot.getModel();
			photographer = photoshoot.getPhotographer();
		}
		else
		{
			model = event.getBusinessTeam().getModels().get(0).getName();
			photographer = event.getBusinessTeam().getPhotographers().get(0).getName();
		}
		line = null;
		item = null;
		
		System.out.println("Please enter any scheduling information notes that may exist");
		schedulingInfoNotes = in.nextLine();
		
		System.out.println("Please enter the age range of the target audience");
		targetAge = in.nextLine();
		
		System.out.println("Please enter the gender of the target demographic");
		targetGender = in.nextLine();
		
		System.out.println("Please enter the location of the target demographic");
		targetLocation = in.nextLine();
		
		Advertisement ad = new Advertisement(team, schedulingInfoNotes, event, photoshoot, model, photographer, line, item, targetAge, targetGender, targetLocation );

		return true;
	}

}
